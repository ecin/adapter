= Adapter

Hash access to anything.

== Defining an Adapter

An adapter requires 4 methods to work: read, write, delete and clear.

    Adapter.define(:memory) do
      def read(key)
        deserialize(client[key_for(key)])
      end

      def write(key, value)
        client[key_for(key)] = serialize(value)
      end

      def delete(key)
        client.delete(key_for(key))
      end

      def clear
        client.clear
      end
    end

Note: in order for things to be most flexible, always wrap key with key_for(key) which will ensure that pretty much anything can be a key. Also, by default serialize and deserialize are included and they Marshal.dump and Marshal.load. Feel free to override these if you prefer JSON serialization or something else.

Once you have defined an adapter, you can get a class of that adapter like this:

    Adapter[:memory]

This returns a dynamic class with your adapting methods included and an initialize method that takes a client. This means you can get an instance of the adapter by using new and passing the client (in this instance a boring hash):

    adapter = Adapter[:memory].new({}) # sets {} to client
    adapter.write('foo', 'bar')
    adapter.read('foo') # 'bar'
    adapter.delete('foo')
    adapter.fetch('foo', 'bar') # returns bar and sets foo to bar

== Note on Patches/Pull Requests

* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a future version unintentionally.
* Commit, do not mess with rakefile, version, or history. (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 John Nunemaker. See LICENSE for details.
